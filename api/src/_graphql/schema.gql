# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type DefaultResponse {
  status: Float!
  message: String!
}

type OutputLogin {
  token: String!
}

type comment {
  id: String!
  cardId: String!
  userId: String!
  author: String!
  body: String!
  description: String
  updatedAt: String!
  createdAt: String!
}

type tag {
  id: String!
  body: String!
  color: String!
  updatedAt: String!
  createdAt: String!
}

type user {
  id: String!
  username: String!
  email: String!
  password: String!
  avatar: String
  updatedAt: String!
  createdAt: String!
  projects: [project!]!
  cards: [card!]!
  comments: [comment!]!
}

type card {
  id: String!
  title: String!
  description: String
  priority: String
  assignees: [user!]
  columnId: String!
  updatedAt: String!
  createdAt: String!
  tags: [tag!]
  comments: [comment!]
}

type column {
  id: String!
  title: String!
  updatedAt: String!
  createdAt: String!
  projectId: String!
  cards: [card!]!
}

type project {
  id: String!
  title: String!
  image: String
  updatedAt: String!
  createdAt: String!
  users: [user!]!
  columns: [column!]!
  tags: [tag!]
  _count: JSON!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type team {
  id: String!
  title: String!
  image: String
  updatedAt: String!
  createdAt: String!
  users: [user!]!
  projects: [project!]!
}

type Query {
  getProject(teamTitle: String!, projectId: String!): project!
  getUserProjects: [project!]!
  getTeam(title: String!): team!
  getUserTeams: [team!]!
  getProjectColumns(data: GetColumnsDto!): [column!]!
  getCards(columnId: String!): [card!]!
  getCard(cardId: String!): card!
}

input GetColumnsDto {
  teamTitle: String!
  projectId: String!
}

type Mutation {
  login(data: LoginDto!): OutputLogin!
  register(data: CreateUserDto!): DefaultResponse!
  addUserInProject(data: AddUserDto!): project!
  createProject(data: CreateProjectDto!): project!
  createCardTag(data: CreateTagDto!): DefaultResponse!
  createTeam(data: CreateTeamDto!): team!
  addUserInTeam(data: AddUserToTeamDto!): team!
  createColumn(data: CreateColumnDto!): column!
  updateColumn(id: String!, newTitle: String!): column!
  deleteColumn(columnId: String!, projectId: String!): DefaultResponse!
  createCard(data: CreateCardDto!): card!
  updateCard(data: UpdateCardDto!): card!
  deleteCard(cardId: String!): DefaultResponse!
  addComment(data: AddCommentDto!): DefaultResponse!
}

input LoginDto {
  email: String!
  password: String!
}

input CreateUserDto {
  email: String!
  username: String!
  password: String!
}

input AddUserDto {
  projectId: String!
  username: String!
}

input CreateProjectDto {
  teamId: String!
  title: String!
}

input CreateTagDto {
  projectId: String!
  body: String!
  color: String!
}

input CreateTeamDto {
  title: String!
}

input AddUserToTeamDto {
  teamId: String!
  username: String!
}

input CreateColumnDto {
  title: String!
  projectId: String!
}

input CreateCardDto {
  title: String!
  columnId: String!
  issueType: String
  priority: String
  description: String
  tags: [String!]
  assignees: [String!]
}

input UpdateCardDto {
  cardId: String!
  title: String
  description: String
  assigneeId: String
  tagId: String
}

input AddCommentDto {
  body: String!
  cardId: String!
  userId: String!
}

type Subscription {
  cardCreated(columnId: String!): card!
  cardUpdated(cardId: String!): card!
}